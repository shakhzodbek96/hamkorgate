<?php

namespace App\Models;

//use Illuminate\Contracts\Auth\MustVerifyEmail;
use App\Traits\HasPartnerScope;
use App\Traits\Searchable;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Cache;

class User extends Authenticatable
{
    use HasFactory, Notifiable,SoftDeletes,Searchable,HasPartnerScope;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'partner_id',
        'theme',
        'phone',
        'chat_id',
        'password_expires_at',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::updating(function ($model) {
            Cache::forget('user_roles_'.$model->id);
            Cache::forget('user_permissions_'.$model->id);
        });
    }

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
        'is_admin',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
        'otp_config' => 'array'
    ];

    public function switchTheme()
    {
        $this->theme = $this->theme == 'light' ? 'dark':'light';
        $this->save();
        return $this->theme;
    }
    public function roles(): \Illuminate\Database\Eloquent\Relations\BelongsToMany
    {
        return $this->belongsToMany(Role::class);
    }

    // Permissions assigned directly to the user (optional)
    public function permissions()
    {
        return $this->belongsToMany(Permission::class);
    }

    public function partner(): \Illuminate\Database\Eloquent\Relations\BelongsTo
    {
        return $this->belongsTo(Partner::class);
    }

    // Check if user has a specific role
    public function hasRole($role)
    {
        $roles = $this->getCachedRoles();
        if (is_string($role)) {
            return $roles->contains($role);
        }

        return $roles->contains($role->name);
    }

    // Check if user has a specific permission
    public function hasPermission($permission)
    {
        return in_array($permission, $this->getCachedPermissions(), true) || $this->hasRole('Super Admin');
    }


    // Assign a role to the user
    public function assignRole(Role $role)
    {
        $this->roles()->syncWithoutDetaching($role->id);
        $this->clearPermissionsCache();
    }

    // Assign a permission to the user
    public function givePermissionTo($permission)
    {
        if (is_string($permission)) {
            $permission = Permission::where('name', $permission)->firstOrFail();
        }
        $this->permissions()->syncWithoutDetaching($permission);
        $this->clearPermissionsCache();
    }

    public function getCachedRoles()
    {
        return Cache::remember("user_roles_{$this->id}", 3600, function () {
            return $this->roles()->pluck('name');
        });
    }

    // Get cached permissions
    public function getCachedPermissions()
    {
        return Cache::remember("user_permissions_{$this->id}", 3600, function () {
            // Eager load roles and their permissions to reduce database queries
            $this->loadMissing('roles.permissions', 'permissions');

            // Collect user permissions
            $permissions = $this->permissions->pluck('name');

            // Collect role-based permissions
            $rolePermissions = $this->roles->flatMap(function ($role) {
                return $role->permissions->pluck('name');
            });

            // Merge both permissions and remove duplicates
            return $permissions->merge($rolePermissions)->unique()->toArray();
        });
    }

    // Clear cached roles and permissions
    public function clearPermissionsCache()
    {
        Cache::forget("user_roles_{$this->id}");
        Cache::forget("user_permissions_{$this->id}");
    }

    // Assign multiple roles to the user
    public function assignRoles(...$roles)
    {
        $roles = collect($roles)->flatten()->map(function ($role) {
            return $this->getRoleId($role);
        })->all();

        $this->roles()->syncWithoutDetaching($roles);
        $this->clearPermissionsCache();
    }

    // Remove roles from the user
    public function removeRoles(...$roles)
    {
        $roles = collect($roles)->flatten()->map(function ($role) {
            return $this->getRoleId($role);
        })->all();

        $this->roles()->detach($roles);
        $this->clearPermissionsCache();
    }

    // Helper method to get role ID
    protected function getRoleId($role)
    {
        if (is_numeric($role)) {
            return $role;
        }
        return Role::where('name', $role)->where('partner_id',$this->partner_id ?? 0)->firstOrFail()->id;
    }

    // Assign multiple permissions directly to the user (optional)
    public function givePermissions(...$permissions)
    {
        $permissions = collect($permissions)->flatten()->map(function ($permission) {
            return $this->getPermissionId($permission);
        })->all();

        $this->permissions()->syncWithoutDetaching($permissions);
        $this->clearPermissionsCache();
    }

    // Remove permissions from the user (optional)
    public function revokePermissions(...$permissions)
    {
        $permissions = collect($permissions)->flatten()->map(function ($permission) {
            return $this->getPermissionId($permission);
        })->all();

        $this->permissions()->detach($permissions);
        $this->clearPermissionsCache();
    }

    // Helper method to get permission ID
    protected function getPermissionId($permission)
    {
        if (is_numeric($permission)) {
            return $permission;
        }
        return Permission::where('name', $permission)->firstOrFail()->id;
    }
}
