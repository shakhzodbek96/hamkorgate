<?php

namespace App\Models;

use App\Jobs\Command\RunInBackground;
use App\Traits\Searchable;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Cache;

class Partner extends Model
{
    use HasFactory, SoftDeletes, Searchable;

    protected $fillable = [
        'name',
        'inn',
        'phone',
        'commission',
        'commission_humo',
        'is_active',
        'auto',
        'config'
    ];

    protected $casts = [
        'is_active' => 'boolean',
        'auto' => 'boolean',
        'config' => 'array'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        // When a partner created, deleted or updated, clear the cache
        static::created(function ($partner) {
            $partner->clearCache();
        });
        static::deleted(function ($partner) {
            $partner->clearCache();
            Cache::forget('partner_token_' . $partner->config['auth']['token']);
        });
        static::updated(function ($partner) {
            $partner->clearCache();
            Cache::forget('partner_auto_status_' . $partner->id);
            Cache::forget('partner_data_' . $partner->id);
            Cache::forget('partner_token_' . $partner->config['auth']['token']);
        });
    }

    public function clearCache()
    {
        Cache::forget('getAvailableForUzcard');
        Cache::forget('getAvailableForHumo');
        Cache::forget('DisabledPartners');
    }

    public static function getDisabledPartnerIds():array
    {
        return Cache::remember('DisabledPartners', now()->addMinutes(30), function () {
            return self::where('auto', 0)->orWhere('is_active', 0)
                ->pluck('id')
                ->toArray();
        });
    }

    public function merchants()
    {
        return $this->hasMany(Merchant::class);
    }

    public function contracts()
    {
        return $this->hasMany(Contract::class);
    }

    public function clients()
    {
        return $this->hasMany(Client::class);
    }

    public static function getAvailableForUzcard()
    {
        return self::where('auto', 1)
            ->where('is_active', 1)
            ->with(['merchants' => function ($query) {
                $query->where('auto', 1)
                    ->whereNotNull('sv_terminal');
            }])
            ->get()
            ->toArray();
    }

    public static function getAvailableForSv()
    {
        return Cache::remember('getAvailableForSv', 60, function () {
            return Partner::where('auto', 1)
                ->where('is_active', 1)
                ->with(['merchants' => function ($query) {
                    $query->where('auto', 1)
                        ->whereNotNull('sv_terminal');
                }])
                ->get()
                ->toArray();
        });
    }

    public static function getCachedData(int $partner_id): ?Partner
    {
        return Cache::remember("partner_data_$partner_id", now()->addMinutes(30), function () use ($partner_id) {
            return Partner::where('id', $partner_id)->first();
        });
    }

    public function removeDispatchedContracts()
    {
        RunInBackground::dispatch(command: 'partner:auto-stop', parameters: ['partner_id' => $this->id]);
    }

    public static function getHumoGoldPartners():array
    {
        return [93,62,124,168,213,3];
    }

    public static function getHumoSilverPartners():array
    {
        return [62,98,56,168];
    }
}
